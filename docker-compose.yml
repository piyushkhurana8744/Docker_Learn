version: '3'

services:
  nginx:
    image: nginx:latest
    ports:
      - "3000:80"  # Expose the container's port 80 to the host's port 3000
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Mount NGINX configuration
    depends_on:
      - node-app  # Ensure nginx waits for node-app to be ready

  node-app:
    build: .
    volumes:
      - .:/app  # Mount the app code into the container
      - /app/node_modules  # Create node_modules inside the container to avoid dependency issues
    environment:
      - NODE_ENV=${NODE_ENV}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_SECRET=${REDIS_SECRET}
      - MongoUrl=${MongoUrl}
    command: npm run start  # Start the application using the "start" script
    depends_on:
      - mongo  # Wait for MongoDB service to be available
      - redis  # Wait for Redis service to be available

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"  # Expose MongoDB default port
    env_file:
      - .env  # Load environment variables from the .env file
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongo-db:/data/db  # Persist MongoDB data in a Docker volume

  redis:
    image: redis:latest
    ports:
      - "6379:6379"  # Expose Redis default port
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_SECRET=${REDIS_SECRET}

volumes:
  mongo-db:  # Define volume to persist MongoDB data
